//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Ae.MetOfficeDataHub
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IMetOfficeDataHubClient
    {
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HourlyResponse> GetHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HourlyResponse> GetHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ThreeHourlyResponse> GetThreeHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ThreeHourlyResponse> GetThreeHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DailyResponse> GetDailyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DailyResponse> GetDailyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetOfficeDataHubClient : IMetOfficeDataHubClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MetOfficeDataHubClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HourlyResponse> GetHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude)
        {
            return GetHourlyForecastAsync(dataSource, excludeParameterMetadata, includeLocationName, latitude, longitude, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HourlyResponse> GetHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude, System.Threading.CancellationToken cancellationToken)
        {
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");

            if (longitude == null)
                throw new System.ArgumentNullException("longitude");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "point/hourly"
                    urlBuilder_.Append("point/hourly");
                    urlBuilder_.Append('?');
                    if (dataSource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dataSource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dataSource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeParameterMetadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeParameterMetadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeParameterMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeLocationName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeLocationName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeLocationName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("latitude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("longitude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HourlyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MetOfficeDataHubApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MetOfficeDataHubApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ThreeHourlyResponse> GetThreeHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude)
        {
            return GetThreeHourlyForecastAsync(dataSource, excludeParameterMetadata, includeLocationName, latitude, longitude, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ThreeHourlyResponse> GetThreeHourlyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude, System.Threading.CancellationToken cancellationToken)
        {
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");

            if (longitude == null)
                throw new System.ArgumentNullException("longitude");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "point/three-hourly"
                    urlBuilder_.Append("point/three-hourly");
                    urlBuilder_.Append('?');
                    if (dataSource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dataSource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dataSource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeParameterMetadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeParameterMetadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeParameterMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeLocationName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeLocationName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeLocationName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("latitude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("longitude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ThreeHourlyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MetOfficeDataHubApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MetOfficeDataHubApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DailyResponse> GetDailyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude)
        {
            return GetDailyForecastAsync(dataSource, excludeParameterMetadata, includeLocationName, latitude, longitude, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find nearest forecast data that matches the request criteria
        /// </summary>
        /// <param name="dataSource">The request data source must be BD1.</param>
        /// <param name="excludeParameterMetadata">If true, exclude parameter metadata in the response. If false or undefined, the parameter metadata is returned.</param>
        /// <param name="includeLocationName">If true, include location name in the response. If false or undefined, no location name is returned.</param>
        /// <param name="latitude">The request latitude value in range -85/+85 expressed as a decimal fraction.</param>
        /// <param name="longitude">The request longitude value in range -180/+180 expressed as a decimal fraction.</param>
        /// <returns>The request was fulfilled successfully</returns>
        /// <exception cref="MetOfficeDataHubApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DailyResponse> GetDailyForecastAsync(string dataSource, bool? excludeParameterMetadata, bool? includeLocationName, float latitude, float longitude, System.Threading.CancellationToken cancellationToken)
        {
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");

            if (longitude == null)
                throw new System.ArgumentNullException("longitude");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "point/daily"
                    urlBuilder_.Append("point/daily");
                    urlBuilder_.Append('?');
                    if (dataSource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dataSource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dataSource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeParameterMetadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeParameterMetadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeParameterMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeLocationName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeLocationName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeLocationName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("latitude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("longitude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DailyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MetOfficeDataHubApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MetOfficeDataHubApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new MetOfficeDataHubApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new MetOfficeDataHubApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("licence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Licence { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Geometry
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> Coordinates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Feature
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometry Geometry { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeatureProperties
    {
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("requestPointDistance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RequestPointDistance { get; set; }

        [Newtonsoft.Json.JsonProperty("modelRunDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ModelRunDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlyFeatureProperties : FeatureProperties
    {
        [Newtonsoft.Json.JsonProperty("timeSeries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HourlyTimeSeries> TimeSeries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlyFeature : Feature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HourlyFeatureProperties Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlyResponse
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HourlyFeature> Features { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameters> Parameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreeHourlyFeatureProperties : FeatureProperties
    {
        [Newtonsoft.Json.JsonProperty("timeSeries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ThreeHourlyTimeSeries> TimeSeries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreeHourlyFeature : Feature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeHourlyFeatureProperties Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreeHourlyResponse
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ThreeHourlyFeature> Features { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameters> Parameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyFeatureProperties : FeatureProperties
    {
        [Newtonsoft.Json.JsonProperty("timeSeries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DailyTimeSeries> TimeSeries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyFeature : Feature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DailyFeatureProperties Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyResponse
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DailyFeature> Features { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameters> Parameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSeries
    {
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyTimeSeries : TimeSeries
    {
        [Newtonsoft.Json.JsonProperty("midday10MWindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Midday10MWindSpeed { get; set; }

        [Newtonsoft.Json.JsonProperty("midnight10MWindSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Midnight10MWindSpeed { get; set; }

        [Newtonsoft.Json.JsonProperty("midday10MWindDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Midday10MWindDirection { get; set; }

        [Newtonsoft.Json.JsonProperty("midnight10MWindDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Midnight10MWindDirection { get; set; }

        [Newtonsoft.Json.JsonProperty("midday10MWindGust", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Midday10MWindGust { get; set; }

        [Newtonsoft.Json.JsonProperty("midnight10MWindGust", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Midnight10MWindGust { get; set; }

        [Newtonsoft.Json.JsonProperty("middayVisibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MiddayVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("midnightVisibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MidnightVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("middayRelativeHumidity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MiddayRelativeHumidity { get; set; }

        [Newtonsoft.Json.JsonProperty("midnightRelativeHumidity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MidnightRelativeHumidity { get; set; }

        [Newtonsoft.Json.JsonProperty("middayMslp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MiddayMslp { get; set; }

        [Newtonsoft.Json.JsonProperty("midnightMslp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MidnightMslp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightSignificantWeatherCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightSignificantWeatherCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dayMaxScreenTemperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DayMaxScreenTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("nightMinScreenTemperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NightMinScreenTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("dayUpperBoundMaxTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DayUpperBoundMaxTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightUpperBoundMinTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NightUpperBoundMinTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("dayLowerBoundMaxTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DayLowerBoundMaxTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightLowerBoundMinTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NightLowerBoundMinTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightMinFeelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NightMinFeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("dayUpperBoundMaxFeelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DayUpperBoundMaxFeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightUpperBoundMinFeelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NightUpperBoundMinFeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("dayLowerBoundMaxFeelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DayLowerBoundMaxFeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightLowerBoundMinFeelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NightLowerBoundMinFeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfPrecipitation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfPrecipitation { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfSnow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfSnow { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfHeavySnow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfHeavySnow { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfRain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfRain { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfHeavyRain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfHeavyRain { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfHail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfHail { get; set; }

        [Newtonsoft.Json.JsonProperty("nightProbabilityOfSferics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NightProbabilityOfSferics { get; set; }

        [Newtonsoft.Json.JsonProperty("maxUvIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxUvIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("daySignificantWeatherCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DaySignificantWeatherCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dayMaxFeelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DayMaxFeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfPrecipitation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfPrecipitation { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfSnow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfSnow { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfHeavySnow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfHeavySnow { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfRain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfRain { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfHeavyRain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfHeavyRain { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfHail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfHail { get; set; }

        [Newtonsoft.Json.JsonProperty("dayProbabilityOfSferics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DayProbabilityOfSferics { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlyTimeSeries : TimeSeries
    {
        [Newtonsoft.Json.JsonProperty("screenTemperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ScreenTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("maxScreenAirTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxScreenAirTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("minScreenAirTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinScreenAirTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("screenDewPointTemperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ScreenDewPointTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("feelsLikeTemperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FeelsLikeTemperature { get; set; }

        [Newtonsoft.Json.JsonProperty("windSpeed10m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WindSpeed10m { get; set; }

        [Newtonsoft.Json.JsonProperty("windDirectionFrom10m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WindDirectionFrom10m { get; set; }

        [Newtonsoft.Json.JsonProperty("windGustSpeed10m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WindGustSpeed10m { get; set; }

        [Newtonsoft.Json.JsonProperty("max10mWindGust", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Max10mWindGust { get; set; }

        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Visibility { get; set; }

        [Newtonsoft.Json.JsonProperty("screenRelativeHumidity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ScreenRelativeHumidity { get; set; }

        [Newtonsoft.Json.JsonProperty("mslp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Mslp { get; set; }

        [Newtonsoft.Json.JsonProperty("uvIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UvIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("significantWeatherCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SignificantWeatherCode { get; set; }

        [Newtonsoft.Json.JsonProperty("precipitationRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float PrecipitationRate { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPrecipAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float TotalPrecipAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalSnowAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float TotalSnowAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfPrecipitation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfPrecipitation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreeHourlyTimeSeries : TimeSeries
    {
        [Newtonsoft.Json.JsonProperty("maxScreenAirTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxScreenAirTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("minScreenAirTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinScreenAirTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("max10mWindGust", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Max10mWindGust { get; set; }

        [Newtonsoft.Json.JsonProperty("significantWeatherCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SignificantWeatherCode { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPrecipAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float TotalPrecipAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalSnowAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float TotalSnowAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("windSpeed10m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WindSpeed10m { get; set; }

        [Newtonsoft.Json.JsonProperty("windDirectionFrom10m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WindDirectionFrom10m { get; set; }

        [Newtonsoft.Json.JsonProperty("windGustSpeed10m", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WindGustSpeed10m { get; set; }

        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Visibility { get; set; }

        [Newtonsoft.Json.JsonProperty("mslp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Mslp { get; set; }

        [Newtonsoft.Json.JsonProperty("screenRelativeHumidity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ScreenRelativeHumidity { get; set; }

        [Newtonsoft.Json.JsonProperty("feelsLikeTemp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FeelsLikeTemp { get; set; }

        [Newtonsoft.Json.JsonProperty("uvIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UvIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfPrecipitation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfPrecipitation { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfSnow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfSnow { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfHeavySnow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfHeavySnow { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfRain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfRain { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfHeavyRain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfHeavyRain { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfHail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfHail { get; set; }

        [Newtonsoft.Json.JsonProperty("probOfSferics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProbOfSferics { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Symbol
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Unit
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Symbol Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Unit Unit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameters : System.Collections.Generic.Dictionary<string, Parameter>
    {

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetOfficeDataHubApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public MetOfficeDataHubApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetOfficeDataHubApiException<TResult> : MetOfficeDataHubApiException
    {
        public TResult Result { get; private set; }

        public MetOfficeDataHubApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625